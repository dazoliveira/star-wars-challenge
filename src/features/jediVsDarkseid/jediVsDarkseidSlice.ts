import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchYourPath } from './jediVsDarkseidAPI';

export interface JediVsDarkseidState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
}

const initialState: JediVsDarkseidState = {
  value: 0,
  status: 'idle',
};

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const chooseYourPathAsync = createAsyncThunk(
  'api/people',
  async () => {
    const response = await fetchYourPath();
    // The value we return becomes the `fulfilled` action payload
    return response.data;
  }
);

export const jediVsDarkseidSlice = createSlice({
  name: 'jediVsDarkseid',
  initialState,
  reducers: {

  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(chooseYourPathAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(chooseYourPathAsync.fulfilled, (state, action) => {
        state.status = 'idle';
        state.value += action.payload;
      });
  },
});

// export const {  } = jediVsDarkseidSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
export const selectFetchStatus = (state: RootState) => state.jediVsDarkseid.status;

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
// export const incrementIfOdd = (amount: number): AppThunk => (
//   dispatch,
//   getState
// ) => {
//   const currentValue = selectCount(getState());
//   if (currentValue % 2 === 1) {
//     dispatch(incrementByAmount(amount));
//   }
// };

export default jediVsDarkseidSlice.reducer;
